name: Delete Workflows By Status

on:
  workflow_dispatch:
    inputs:
      status:
        description: 'Status of workflows to delete (default: action required)'
        required: false
        default: 'action required'
        type: string

jobs:
  delete_by_status:
    runs-on: ubuntu-latest
    permissions:
      actions: write  # Needed to delete workflow runs
      contents: read  # Default permission to read repository contents
    steps:
      - name: Delete workflow runs with specified status
        uses: actions/github-script@v6
        with:
          script: |
            // Get input status and map common formats to API status values
            let inputStatus = core.getInput('status') || 'action required';
            
            // Map of human-friendly status names to API values
            const statusMap = {
              'action required': 'action_required',
              'in progress': 'in_progress',
              'cancelled': 'cancelled',
              'failure': 'failure',
              'success': 'success',
              'queued': 'queued',
              'waiting': 'waiting',
              'completed': 'completed',
              'neutral': 'neutral',
              'skipped': 'skipped',
              'timed out': 'timed_out',
              'requested': 'requested',
              'pending': 'pending'
            };
            
            // Convert to API status if needed
            const status = statusMap[inputStatus.toLowerCase()] || inputStatus;
            
            console.log(`Looking for workflow runs with status: ${inputStatus} (API: ${status})`);
            
            // Get list of all workflows
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            let deletedRuns = 0;
            let canceledRuns = 0;
            let processedWorkflows = 0;
            
            // Process each workflow
            for (const workflow of workflows.data.workflows) {
              processedWorkflows++;
              console.log(`Processing workflow: ${workflow.name} (${workflow.id})`);
              
              let page = 1;
              let hasMorePages = true;
              
              while (hasMorePages) {
                // Get workflow runs with pagination
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflow.id,
                  per_page: 100,
                  page: page
                });
                
                if (runs.data.workflow_runs.length === 0) {
                  hasMorePages = false;
                  continue;
                }
                
                // Process runs on this page
                for (const run of runs.data.workflow_runs) {
                  // Check if this run matches the requested status
                  if (run.status === status) {
                    console.log(`Found run #${run.id} with status "${status}" for workflow "${workflow.name}"`);
                    
                    // If the workflow is still in progress, cancel it first
                    if (!['completed', 'cancelled', 'failure', 'success'].includes(run.status)) {
                      console.log(`Canceling run #${run.id} for workflow "${workflow.name}"`);
                      try {
                        await github.rest.actions.cancelWorkflowRun({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          run_id: run.id
                        });
                        canceledRuns++;
                        console.log(`Successfully canceled run #${run.id}`);
                      } catch (error) {
                        console.log(`Error canceling run #${run.id}: ${error.message}`);
                      }
                    }
                    
                    // Delete the run
                    console.log(`Deleting run #${run.id} for workflow "${workflow.name}"`);
                    try {
                      await github.rest.actions.deleteWorkflowRun({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        run_id: run.id
                      });
                      deletedRuns++;
                      console.log(`Successfully deleted run #${run.id}`);
                    } catch (error) {
                      console.log(`Error deleting run #${run.id}: ${error.message}`);
                    }
                  }
                }
                
                // Check if we need to process more pages
                if (runs.data.workflow_runs.length < 100) {
                  hasMorePages = false;
                } else {
                  page++;
                }
              }
            }
            
            console.log(`Operation complete. Processed ${processedWorkflows} workflows, canceled ${canceledRuns} runs, and deleted ${deletedRuns} workflow runs with status "${inputStatus}" (API: "${status}")`);